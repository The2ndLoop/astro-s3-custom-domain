AWSTemplateFormatVersion: 2010-09-09
Description: CDN

Parameters:
  ProjectName:
    Type: String
    Description: The name of the project. USE KEBAB-CASE ONLY.

Resources:
  Oac:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ${ProjectName}-oac
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  S3OriginBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: { Fn::ImportValue: !Sub "${ProjectName}-S3OriginBucketName" }
      PolicyDocument:
        Statement:
          - Sid: allow-cloudfront-to-get-object
            Effect: Allow
            Principal: 
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub
              - ${BucketArn}/*
              - BucketArn: { Fn::ImportValue: !Sub "${ProjectName}-S3OriginBucketArn" }
            Condition: 
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"
          - Sid: allow-cloudfront-to-list-bucket # to avoid getting 403 error response instead of 404
            Effect: Allow
            Principal: 
              Service: cloudfront.amazonaws.com
            Action: s3:ListBucket
            Resource: { Fn::ImportValue: !Sub "${ProjectName}-S3OriginBucketArn" }
            Condition: 
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub "${ProjectName}-cloudfront"
        Origins:
          - Id: S3Origin
            DomainName: { Fn::ImportValue: !Sub "${ProjectName}-S3OriginBucketDomainName" }
            OriginAccessControlId: !GetAtt Oac.Id
            S3OriginConfig:
              OriginAccessIdentity: ""
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          AllowedMethods: 
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 #CachingOptimized
          Compress: true
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 0
        Enabled: true
        IPV6Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        WebACLId: { Fn::ImportValue: !Sub "${ProjectName}-WebACLArn" }
        ViewerCertificate:
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
          AcmCertificateArn: { Fn::ImportValue: !Sub "${ProjectName}-CertificateArn" }
        Aliases:
          - { Fn::ImportValue: !Sub "${ProjectName}-DomainName" }
        Logging:
          Bucket: { Fn::ImportValue: !Sub "${ProjectName}-S3LogsBucketDomainName" }
          IncludeCookies: true
          Prefix: CloudFront 
      Tags: [{ Key: Project, Value: !Ref ProjectName }] 

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: { Fn::ImportValue: !Sub "${ProjectName}-HostedZoneId" }
      Name: { Fn::ImportValue: !Sub "${ProjectName}-DomainName" }
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront Hosted Zone ID

  BasicAuthFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: BasicAuthFunction
      FunctionConfig:
        Comment: Basic authentication
        Runtime: cloudfront-js-2.0
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
          const request = event.request
          const headers = request.headers
          const authString = 'Basic ' + 'cThBcE1vZmN1dExBOmJUR1IwWXJGZjFHOQ==' // Change here

          if (!headers.authorization || headers.authorization.value !== authString) {
            return {
              statusCode: 401,
              statusDescription: 'Unauthorized',
              headers: {
                'www-authenticate': { value: 'Basic' }
              }
            };
          }

          return request;
        }
